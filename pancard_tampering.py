# -*- coding: utf-8 -*-
"""Pancard tampering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16Yl9-q8qHF1BHuA93l0H74xbgg9gA3ld
"""

#importing necessary packages
 from skimage.metrics import structural_similarity
 import imutils
 import cv2
 from PIL import Image
 import requests

#creating directory
!mkdir pan_card_tampering
!mkdir pan_card_tampering/image

# open image and display
 org = Image.open(requests.get('https://www.thestatesman.com/wp-content/uploads/2019/07/pan-card.jpg', stream=True).raw)
 tamp = Image.open(requests.get('https://assets1.cleartax-cdn.com/s/img/20170526124335/Pan4.png', stream = True).raw)

#file format
print(org.format)
print(tamp.format)

#image size in pixels. The size is given as a 2-tuple(w,h)
print(org.size)
print(tamp.size)

#resizing the images
org = org.resize((250, 160))
print(org.size)
org.save('pan_card_tampering/image/og image.png')     #save the og image

tamp = tamp.resize((250, 160))
print(tamp.size)
tamp.save('pan_card_tampering/image/tampered image.png')     #save the tampered image

org

tamp

org = cv2.imread('pan_card_tampering/image/og image.png')
tamp = cv2.imread('pan_card_tampering/image/tampered image.png')

# converting to grayscale
#color images are complex to undertsand by the machine coz it has 3 channel
# i.e. rgb whereas grayscale has only 1 channel

original_gray = cv2.cvtColor(org, cv2.COLOR_BGR2GRAY)
tampered_gray = cv2.cvtColor(tamp, cv2.COLOR_BGR2GRAY)

#STRUCTURAL SIMILARITY INDEX (SSIM)
# structure similarity means structure of one image is compared to structure of
# another image and DIFFERENCE B/W THEM is noted as SSIM

(score, diff) = structural_similarity(original_gray, tampered_gray, full = True)
diff = (diff * 255).astype("uint8")
print("SSIM: {}".format(score))

#calculating threshold and contours

thresh = cv2.threshold(diff, 0, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)[1]
cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
cnts = imutils.grab_contours(cnts)

cnts

# loop over the countours

for c in cnts:
  (x, y, w, h) = cv2.boundingRect(c)
  cv2.rectangle(org, (x, y), (x + w, y + h), (0, 0, 255), 2)
  cv2.rectangle(tamp, (x, y), (x + w, y + h), (0, 0, 255), 2)

#display image with contour
Image.fromarray(org)

Image.fromarray(tamp)

Image.fromarray(diff)  #black portions shows the difference btw both the images

Image.fromarray(thresh)

